use Test;
use Iter::Able::Every;

my &id = -> \g, \e, Str $desc? { g | e ~~ Seq:D ?? cmp-ok(g, "eqv", e, $desc) !! is-deeply(g, e, $desc) };

plan 19;

my $s;

# Iterables
$s := [2, 2, 3, -4, 5];
id every($s), True, "List with no predicate (holds)";
id every($s, * > -8), True, "List with a predicate that holds";
id every($s, * == 2), False, "List with a predicate that doesn't hold";

$s := (2, 2, 3, 5);
id $s.&every(&is-prime), True, "List with a predicate that holds (2)";
id $s.&every({ $_ ** 2 > 7 } ), False, "List with a predicate that doesn't hold (2)";
id $s.&every({ $_ ** 2 > 77 } ), False, "List with a predicate that doesn't hold (3)";

$s := [];
id every($s), True,  "Empty list is vacuously True";

my $t = ();
id $t.&every, True,  "Empty itemized list is True too";

$s := [0, 0, 0, 0];
id every($s), False, "List with no predicate (doesn't hold)";

$s := (Any, 0e0, [], "");
id every($s), False, "List with no predicate (doesn't hold) (2)";

$s := [6, 7, 8, 93, 51, 4, -3, 64].Seq;
id every($s), True, "Seq with no predicate";

$s := [63, 7, 81, 93, 51, 41, -39, 647].Seq;
id every($s, * !%% 2), True, "Seq with a predicate that holds";

$s := [6, 7, 8, 93, 51, 0, 4, -3, 64].Seq;
id every($s, * %% 18), False, "Seq with a predicate that doesn't hold";

$s := (1, -1, 2).lazy;
id $s.&every(), True, "Explicitly .lazy input";

$s := [1, 0, -1, 2];
id every($s, &{ False }), False, "Random list with no-pass predicate";

$s := (4, |(5 xx *));
id every($s, * == 4), False, "Short-circuits";

# Strings
$s := "thereisnospacehere";
id $s.&every(/ \S /), True, "String with a (regex) predicate that holds";
id $s.&every(/ 's' /), False, "String with a (regex) predicate that doesn't hold";

# Iterators
$s := (0, "0", 2, -5, 4, 12, 0, 3);
my \it = $s.iterator;
it.pull-one for ^2;
id every(it, * ~~ Int:D), True, "Iterator";

done-testing;
