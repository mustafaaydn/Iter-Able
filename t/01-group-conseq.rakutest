use Test;
use Iter::Able::Group-Conseq;

say "\n*****Group-Conseq*****";
plan 7;

my $s;
$s := [2, 2, 3, 4, 5, -5, 25, 3, 3];
is-deeply group-conseq($s, as => &abs), [2 => (2, 2), 3 => (3,), 4 => (4,), 5 => (5, -5), 25 => (25,), 3 => (3, 3)].Seq, "with `&abs`";

$s := [];
is-deeply group-conseq($s, as => * > 0),  [].Seq, "with `* > 0`";

$s := [0, 0, 0, 0];
is-deeply group-conseq($s, as => * == 0), [Bool::True => (0, 0, 0, 0)].Seq, "with `* == 0`";

$s := [-1, -2, 0, 8, -3];
is-deeply group-conseq($s, as => * < 0), [Bool::True => (-1, -2), Bool::False => (0, 8), Bool::True => (-3,)].Seq, "with `* < 0`";

$s := [1, 1, 2, 2, 1, 1, 2, 2];
is-deeply group-conseq($s),  [1 => (1, 1), 2 => (2, 2), 1 => (1, 1), 2 => (2, 2)].Seq, "with `*`";

$s := [1, 0, -1, 2];
is-deeply group-conseq($s, as => &{False}), [Bool::False => $s.List].Seq, "with `\{False\}`";

$s := "neither AM I!";
is-deeply group-conseq($s, as => /<.lower>/), [Bool::True => ('n', 'e', 'i', 't', 'h', 'e', 'r'),
                                               Bool::False => (' ', 'A', 'M', ' ', 'I', '!')].Seq, "with `/<lower>/`";

done-testing;