use Test;
use Iter::Able::Flatten;

say "\n*****Flatten*****";
plan 7;

my $s;
$s := [1, 2, 3];
is-deeply flatten($s), $s.Seq, "Random list with 0 level";

$s := ((1, 2), (3, 4, 5), 6);
is-deeply flatten($s), (1, 2, 3, 4, 5, 6).Seq, "Random list with 0, 1 level";

$s := [[[2, 4],], [[5, 6], [7, 77, 777]]];
is-deeply flatten($s), [2, 4, 5, 6, 7, 77, 777].Seq, "Random list with 2 levels";

$s := [["a", ("b", "c")], [("d",), "e", "f", ["g", ("h", "i")]]];
is-deeply $s.&flatten, "abcdefghi".comb, "Ragged list";

$s := [];
is-deeply flatten($s), [].Seq,  "Empty-list";

$s := [(3, 4), 5, (6,)];
is-deeply flatten($s), [3, 4, 5, 6].Seq, "Itemizations are not respected";

$s := [[1, 2], [[[3, 4], [5]], [[[[6, 7],],],]]];
my \it = $s.iterator;
it.pull-one;
is-deeply it.&flatten, [3, 4, 5, 6, 7].Seq, "Iterator flattening";

done-testing;
