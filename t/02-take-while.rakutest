use Test;
use Iter::Able::Take-While;

say "\n*****Take-While*****";
plan 8;

my $s;
$s := [2, 2, 3, 4, 5, -5, 25, 5, -5, 5, 5, -5, 3];
is-deeply take-while($s, * > 0), [2, 2, 3, 4, 5].Seq, "Random list with `* > 0`";

$s := [];
is-deeply take-while($s, * > 0), [].Seq,  "Empty-list with `* > 0`";

$s := [0, 0, 0, 0];
is-deeply take-while($s, * < 0), [].Seq, "All zeros with `* < 0` ";

$s := [0, -1, -2, -3];
is-deeply take-while($s, * < 0), [].Seq, "No leading negatives with `* < 0`";

$s := [6, 7, 8, 93, 51, 0, 4, -3, 64];
is-deeply take-while($s, {$_}), $s[^$s.first(*.not, :k)].Seq, "Random list with identity predicate, i.e., until first falseful";

$s := [1, 0, -1, 2];
is-deeply take-while($s, &{True}), $s.Seq, "Random list with all-pass predicate";

$s := [1, 0, -1, 2];
is-deeply take-while($s, &{False}), [].Seq, "Random list with no-pass predicate";

$s := "neither AM I!";
is-deeply take-while($s, /<.lower>/), "neither", "Mixed case string with /<lower>/ predicate";

done-testing;
