use Test;
use Iter::Able::Remove-First;

my &id = -> \g, \e, Str $desc? { g | e ~~ Seq:D ?? cmp-ok(g, "eqv", e, $desc) !! is-deeply(g, e, $desc) };

plan 15;

my $s;
$s := [2, 2, 3, -4, 5];
id remove-first($s, * !%% 2), [2, 2, -4, 5].Seq, "Random list with a normal predicate";

$s := (2, 2, 3, -4, 5);
id $s.&remove-first(* == 5), (2, 2, 3, -4).Seq, "Random list with a normal predicate (2)";

$s := [];
id remove-first($s, {$_}), ().Seq,  "Empty list";

my $t = ();
id $t.&remove-first({$_}), ().Seq,  "Empty itemized list";

$s := [0, 0, 0, 0];
id remove-first($s, * == 0), [0, 0, 0].Seq, "All zeros with * == 0 predicate";

$s := [6, 7, 8, 93, 51, 0, 4, -3, 64];
id remove-first($s), $s.skip, "Random list with no predicate";

$s := (1, 0, -1, 2);
id remove-first($s, &{ True }), $s.skip, "Random list with all-pass predicate; same as if no predicate";

$s := [1, 0, -1, 2].Seq;
id remove-first($s, &{ False }), [1, 0, -1, 2].Seq, "Seq with no-pass predicate";

$s := "fi rst whitespace is gone";
id $s.&remove-first(/ \s /), "first whitespace is gone", "String, and a regex as the predicate";

$s := "";
id $s.&remove-first, "", "Empty string, no predicate";
id $s.&remove-first({True}), "", "Empty string, with predicate";

$s := (2, 3, 100, 200, 89, 525, 71, 3, 2);
my \it = $s.iterator;
it.pull-one for ^2;
my \newit = remove-first(it, *.is-prime);
it.pull-one;  # should affect `newit`s behaviour
does-ok newit, Iterator, "Iterator (returned an Iterator, not a Seq)";
id Seq.new(newit), [200, 525, 71, 3, 2].Seq, "Iterator (values)";
ok it.pull-one =:= IterationEnd, "Iterator (original, exhausted)";
ok newit.pull-one =:= IterationEnd, "Iterator (new, exhausted)";

done-testing;
