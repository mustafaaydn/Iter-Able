use Test;
use Iter::Able::Remove-First;

plan 13;

my $s;
$s := [2, 2, 3, -4, 5];
is-deeply remove-first($s, * !%% 2), [2, 2, -4, 5].Seq, "Random list with a normal predicate";

$s := (2, 2, 3, -4, 5);
is-deeply $s.&remove-first(* == 5), (2, 2, 3, -4).Seq, "Random list with a normal predicate (2)";

$s := [];
is-deeply remove-first($s, {$_}), ().Seq,  "Empty list";

my $t = ();
is-deeply $t.&remove-first({$_}), ().Seq,  "Empty itemized list";

$s := [0, 0, 0, 0];
is-deeply remove-first($s, * == 0), [0, 0, 0].Seq, "All zeros with * == 0 predicate";

$s := [6, 7, 8, 93, 51, 0, 4, -3, 64];
is-deeply remove-first($s), $s.skip, "Random list with no predicate";

$s := (1, 0, -1, 2);
is-deeply remove-first($s, &{ True }), $s.skip, "Random list with all-pass predicate; same as if no predicate";

$s := [1, 0, -1, 2];
is-deeply remove-first($s, &{ False }), $s.Seq, "Random list with no-pass predicate";

$s := "Real String";
is-deeply "fi rst whitespace is gone".&remove-first(/ \s /), "first whitespace is gone", "String, and a regex as the predicate";

# my \it = [12, 3, 4, 15, 0, 7].iterator;
# it.pull-one for ^2;
# is-deeply remove-first(it, &is-prime), (4, 15, 0).Seq, "Iterator";

$s := (2, 3, 100, 200, 89, 525, 71, 3, 2);
my \it = $s.iterator;
it.pull-one for ^2;
my \newit = remove-first(it, *.is-prime);
it.pull-one;  # should affect `newit`s behaviour
does-ok newit, Iterator, "Iterator (returned an Iterator, not a Seq)";
is-deeply Seq.new(newit), [200, 525, 71, 3, 2].Seq, "Iterator (values)";
ok it.pull-one =:= IterationEnd, "Iterator (original, exhausted)";
ok newit.pull-one =:= IterationEnd, "Iterator (new, exhausted)";

done-testing;
