use Test;
use Iter::Able::Map-Indexed;

plan 10;

my $s;
$s := [3, 2, 1];
is-deeply $s.&map-indexed(* * *), (0, 2, 2).Seq, "Random list with `* * *`";

$s := (4, 7, 12, -3);
is-deeply $s.&map-indexed(* + *, start => 1), (5, 9, 15, 1).Seq, "Random list with `* + *` and nondefault `start`";

$s := (4, 7, 12, -3);
is-deeply $s.&map-indexed, ((0, 4), (1, 7), (2, 12), (3, -3)).Seq, "Random list with default mapper";

$s := [];
is-deeply map-indexed($s), [].Seq,  "Empty-list";

$s := [0, 0, 0, 0];
is-deeply map-indexed($s, * R/ *, start => 1), $s>>.Rat.Seq, "All zeros with index / item, starting at 1";

$s := "train";
is-deeply $s.&map-indexed(* Rx *, start => 1), ("t", "rr", "aaa", "iiii", "nnnnn").Seq, "String with repetition";

$s := (-2, -1, 0, 7, 77, 777);
my \it = $s.iterator;
it.pull-one for ^2;
my \newit = map-indexed(it, * R** *, start => 1);
it.pull-one;  # should affect `newit`s behaviour
does-ok newit, Iterator, "Iterator (returned an Iterator, not a Seq)";
is-deeply Seq.new(newit), $s.skip(3) >>**<< [1, 2, 3], "Iterator (values)";
ok it.pull-one =:= IterationEnd, "Iterator (original, exhausted)";
ok newit.pull-one =:= IterationEnd, "Iterator (new, exhausted)";

done-testing;
