Iter::Able -- Adding abilities for iterables

** Synopsis
#+begin_src raku
use Iter::Able <take-while group-conseq>;

[2, 3, 19, 7, 44, 13, -1].&take-while(*.is-prime).raku.say;  # (2, 3, 19, 7).Seq

"until the first space".&take-while(/\S/).raku.say;          # "until"

[4, 4, 5, 4].&group-conseq.raku.say;                         # (4 => (4, 4), 5 => (5,), 4 => (4,)).Seq

(1, -1, 1, -1, 1, -1).&group-conseq(as => &abs).raku.say;    # (1 => (1, -1, 1, -1, 1, -1),).Seq

#+end_src

** Description
Provides iterable manipulation functions. Raku already has superb support for such tasks, e.g., =map=, =grep=, =rotor=, =categorize= etc. One can build more specific functions using them; this module aims to do that for variety of functions for reuse. Inspirations include [[https://github.com/magnars/dash.el][dash.el]] of ELisp, [[https://rubydoc.info/stdlib/core/Enumerable][Enumerable]] of Ruby, [[https://doc.rust-lang.org/stable/std/iter/trait.Iterator.html][std::iter::Iterator]] of Rust, [[https://docs.python.org/3/library/itertools.html][itertools]] and [[https://more-itertools.readthedocs.io/en/stable/][more_itertools]] of Python.

*** =use=age
+ /No/ functions imported: =use Iter::Able;=
+ /All/ functions imported: =use Iter::Able *;= (or =<*>=)
+ Selective importing: =use Iter::Able <take-while skip-while>;=

All functions are our-scoped so they are reachable with their partially qualified names in any case, e.g., =Iter::Able::skip-while=.

*** Functions
They are documented [[*Functions][here]].


** Contribution
For a new function, there are "module.template" and "tester.template" in tools/; "make-new-fun.raku" is also there and generates a rakumod and a rakutest file for the new function in appropriate directories. Rest is filling in the blanks. Let's say for adding "intersperse" functionality, after forking:

#+begin_src shell
$ git clone git@github.com:<your-username>/Iter-Able.git
$ cd Iter-Able
$ git checkout -b intersperse
$ raku tools/make-new-fun.raku
#+end_src

"lib/Iter/Able/Intersperse.rakumod" and "t/0x-intersperse.rakutest" are generated and filled in with some boilerplate.

** License
This library is free software; you can redistribute it and/or modify it under the [[https://directory.fsf.org/wiki/License:Artistic-2.0][Artistic License 2.0]].

