#| Short explanation of the function.
#`{
    # 
    >>> [1, 2, 3, 0, 4, 5].&fun-name
    (1 2 3)

    # 
    >>> (4, 7, 12, -3, 58, 0, 102).&fun-name(* >= 0)
    (4 7 12)

    # 
    >>> "until first whitespace".&fun-name(/ \S /).raku
    "until"

    # 
    >>> (r1 => 7.13, r2 => 6.89, r3 => 7.90, r4 => 6.81).&fun-name((*.value - 7).abs <= 0.2)
    (r1 => 7.13 r2 => 6.89)
}
unit module Module-Name;

use nqp;

my class ClassName does Iterator {
	has Mu $!iter;  #= Passed iterable's iterator
    has &!pred;	    #= Predicate

    has $!curr;     #= State: current value

    method !SET-SELF($!iter, &!pred) { self }

    method new(\iterable, \pred) {
		nqp::create(self)!SET-SELF(iterable.iterator, pred)
    }

    method pull-one {
        nqp::if(
			# Is the iterable exhausted?
    	    nqp::eqaddr((my $next := $!iter.pull-one), IterationEnd),
			# Yes; signal
            IterationEnd,
			# No; ...
            nqp::stmts(
                ...
            )
        )
    }

    method is-lazy() { $!iter.is-lazy }
}

our proto fun-name(\ist, &pred = {$_}) is export {*}

multi fun-name(Iterable \it, &pred = {$_}) {
    Seq.new: ClassName.new: it, (&pred ~~ Regex ?? (* ~~ &pred).so !! &pred)
}

multi fun-name(Str \st, &pred = {$_}) {
    join "", Seq.new: ClassName.new: st.comb, (&pred ~~ Regex ?? (* ~~ &pred).so !! &pred)
}
