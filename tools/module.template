#| Short explanation of the function.
#`{
    #
    >>> [1, 2, 3, 0, 4, 5].&fun-name
    (1, 2, 3).Seq

    #
    >>> fun-name (4, 7, 12, -3), * >= 0
    (4, 7, 12).Seq

    #
    >>> "until first whitespace".&fun-name(/ \S /)
    "until"
}
unit module Module-Name;

use nqp;

my class ClassName does Iterator {
    has Mu $!iter;  #= Passed iterator
    has &!pred;     #= Predicate
    has &!mapper;   #= Transformer

    has $!curr;     #= State: current value

    method !SET-SELF($!iter, &!pred) { self }

    method new(\iterator, \pred) {
        nqp::create(self)!SET-SELF(iterator, pred)
    }

    method pull-one {
        nqp::if(
            # Is the iterable exhausted?
            nqp::eqaddr((my $next := $!iter.pull-one), IterationEnd),
            # Yes; signal
            IterationEnd,
            # No; ...
            nqp::stmts(
                ...
            )
        )
    }

    method is-lazy { $!iter.is-lazy }
    method Seq     { Seq.new(self)  }
}

our proto fun-name(\ist, &pred = {$_}) is export {*}

multi fun-name(Iterable:D \it, &pred = {$_} --> Seq:D) {
    Seq.new: ClassName.new: it.iterator, (&pred ~~ Regex ?? (* ~~ &pred).so !! &pred)
}

multi fun-name(Iterator:D \it, &pred = {$_} --> ClassName:D) {
    ClassName.new: it, (&pred ~~ Regex ?? (* ~~ &pred).so !! &pred)
}

multi fun-name(Str:D \st, &pred = {$_} --> Str:D) {
    join "", Seq.new: ClassName.new: st.comb.iterator, (&pred ~~ Regex ?? (* ~~ &pred).so !! &pred)
}
