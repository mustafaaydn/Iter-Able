use Test;
use Iter::Able::Module-Name;

my &id = -> \g, \e, Str $desc? { g | e ~~ Seq:D ?? cmp-ok(g, "eqv", e, $desc) !! is-deeply(g, e, $desc) };

plan 12;

my $s;

# Iterables
$s := [2, 2, 3, -4, 5];
id fun-name($s, ...), EXPECTED, "Random list with ...";

$s := (2, 2, 3, -4, 5);
id $s.&fun-name(...), EXPECTED, "List with ...";

$s := [];
id fun-name($s, ...), EXPECTED,  "Empty list";

my $t = ();
id $t.&fun-name(...), EXPECTED,  "Empty itemized list";

$s := [0, 0, 0, 0];
id fun-name($s, ...), EXPECTED, "All zeros with ...";

$s := (0, -1, -2, -3).Seq;
id fun-name($s, ...), EXPECTED, "Seq with ... ";

$s := [6, 7, 8, 93, 51, 0, 4, -3, 64].Seq;
id fun-name($s, ...), EXPECTED, "Seq with no predicate, i.e., ...";

$s := (1, 0, -1, 2);
id fun-name($s, &{ True }), EXPECTED, "Random list with all-pass predicate";

$s := [1, 0, -1, 2];
id fun-name($s, &{ False }), EXPECTED, "Random list with no-pass predicate";

# Strings
$s := "Real String";
id fun-name($s, ...), EXPECTED, "String with ...";

# Iterators
my \it = [12, 3, 4, -5, 0, 7].iterator;
it.pull-one for ^2;
id fun-name(it, ...), EXPECTED, "Iterator";

# Invalid calls
throws-like { [12, 3, 4].&fun-name }, Exception, "No argument provided", message => / 'Must supply at least this' /;

done-testing;
